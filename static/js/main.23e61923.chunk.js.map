{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["buttons","one","two","three","four","five","six","seven","eight","nine","zero","equals","add","subtract","multiply","divide","clear","clearE","decimal","escape","negative","displayDefault","validKeys","Object","values","numKeys","exprKeys","Button","_this","this","id","props","react_default","a","createElement","className","onClick","handleClick","Component","App","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","expression","displayText","handleKeyPress","bind","assertThisInitialized","handleInput","key","includes","setState","concat","console","log","event","document","addEventListener","script","src","async","body","appendChild","App_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23e61923.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nlet buttons = {\n  'one': '1',  'two': '2',  'three': '3',  'four': '4',  'five': '5',\n  'six' : '6',  'seven': '7', 'eight': '8', 'nine': '9', 'zero': '0',\n  'equals': '=', 'add': '+', 'subtract': '-','multiply': 'x',\n  'divide': '/','clear':'C','clearE':'CE','decimal':'.',\n  'escape':'‚Üê','negative':'+/-'\n}\n\nlet displayDefault = '0'\nlet validKeys = Object.values(buttons)\nlet numKeys = ['1','2','3','4','5','6','7','8','9','0']\nlet exprKeys= ['1','2','3','4','5','6','7','8','9','0',\n               '=','+','-','x','/','.']\nclass Button extends Component {\n  render() {\n    let id = this.props.id;\n    return(\n      <div id={id} className='button' onClick={()=>this.props.handleClick(id)}>{buttons[id]}</div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expression: '',\n      displayText: displayDefault\n    }\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n  handleInput(key){\n    if (exprKeys.includes(key)){\n      // this.setState({expression:this.expression.concat(key)})\n      if (this.state.displayText===displayDefault){\n        if (numKeys.includes(key)){\n          this.setState({displayText: key})\n        }\n      } else {\n       this.setState({displayText: this.state.displayText.concat(key)})\n      }\n    } else if (key===buttons['equals']) {\n      console.log('Equal')\n      this.setState({displayText: displayDefault, expression:''})\n    } else if (key===buttons['clear']) {\n      this.setState({displayText: displayDefault, expression:''})\n    }\n    console.log(key,key===buttons['equals'])\n\n  }\n  handleClick(id){\n    this.handleInput(buttons[id])\n    console.log(id,'clicked')\n  }\n  handleKeyPress(event) {\n    if (validKeys.includes(event.key)){\n      this.handleInput(event.key);\n      console.log(event.key,'pressed');\n    }\n  }\n  componentWillMount(){\n    document.addEventListener(\"keydown\", this.handleKeyPress.bind(this));\n  }\n  componentDidMount () {\n        const script = document.createElement(\"script\");\n        script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n        script.async = true;\n        document.body.appendChild(script);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div id='display'>{this.state.displayText}</div>\n        <div id='container'>\n          <Button id='clearE' handleClick={this.handleClick.bind(this)} />\n          <Button id='clear'  handleClick={this.handleClick.bind(this)} />\n          <Button id='escape' handleClick={this.handleClick.bind(this)} />\n          <Button id='divide' handleClick={this.handleClick.bind(this)} />\n          <Button id='one'    handleClick={this.handleClick.bind(this)} />\n          <Button id='two'    handleClick={this.handleClick.bind(this)} />\n          <Button id='three'  handleClick={this.handleClick.bind(this)} />\n          <Button id='multiply' handleClick={this.handleClick.bind(this)} />\n          <Button id='four' handleClick={this.handleClick.bind(this)}/>\n          <Button id='five' handleClick={this.handleClick.bind(this)}/>\n          <Button id='six' handleClick={this.handleClick.bind(this)}/>\n          <Button id='subtract' handleClick={this.handleClick.bind(this)}/>\n          <Button id='seven' handleClick={this.handleClick.bind(this)}/>\n          <Button id='eight' handleClick={this.handleClick.bind(this)}/>\n          <Button id='nine' handleClick={this.handleClick.bind(this)}/>\n          <Button id='add' handleClick={this.handleClick.bind(this)}/>\n          <Button id='negative' handleClick={this.handleClick.bind(this)}/>\n          <Button id='zero' handleClick={this.handleClick.bind(this)}/>\n          <Button id='decimal' handleClick={this.handleClick.bind(this)}/>\n          <Button id='equals' handleClick={this.handleClick.bind(this)}/>\n        </div>\n        <p>Javascript calculator by CT</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}